import os
import cv2
import sys
import time
from main import compute_static_background_from_sequence

def SBM_processing_pipeline(dataset_path, result_path):
    '''The pipeline for processing the SBMnet dataset. This pipeline will
        generate a 'results' folder in the 'result_path' to save one estimated
        background image for each video generated by a background modeling
        method.

        input:
            dataset_path: path of the SBMnet dataset folder;
            result_path: path of the results folder.''' 

    category_list = ['backgroundMotion', 'basic', 'clutter', 'illuminationChanges', 'intermittentMotion', 'jitter', 'veryLong', 'veryShort']

    for category in category_list:
        category_path = os.path.join(dataset_path, category)

        for video in os.listdir(category_path):
            print(['Now processing: "' + category + ' / ' + video + '" video'])
            video_path = os.path.join(category_path, video, 'input')

        # calls static background model
            BG_result = compute_static_background_from_sequence(video_path)

        # conversion from torch tensor format to OpenCV format
            BG_result = BG_result.permute(1, 2, 0).numpy()*255
            BG_result = cv2.cvtColor(BG_result, cv2.COLOR_RGB2BGR)

        #saves the image
            result_video_path = os.path.join(result_path, category, video)

            if ~os.path.exists(result_video_path):
                os.makedirs(result_video_path)

                cv2.imwrite(os.path.join(result_video_path, 'RESULT_background.jpg'), BG_result)

if __name__ == "__main__":

    if len(sys.argv) < 3:
        print("Usage: python {0} <dataset_path> <output_dir_path>".format(sys.argv[0]))
        exit(0)
    dataset_path = sys.argv[1]
    output_dir_path = sys.argv[2]
    start_time = time.time()
    SBM_processing_pipeline(dataset_path, output_dir_path)
    end_time = time.time()
    print(f'processing finished, processing time is {end_time - start_time}')